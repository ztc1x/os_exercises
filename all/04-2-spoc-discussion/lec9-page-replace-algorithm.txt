Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-03-30T11:31:07+08:00

====== lec9 页置换算法 ======
Created 星期一 30 三月 2015

===== 对视频内容的理解 =====

1. 置换算法的功能？
2. 全局和局部置换算法的不同？
3. 最优算法、先进先出算法和LRU算法的思路？
4. 时钟置换算法的思路？
5. LFU算法的思路？
6. 什么是Belady现象？
7. 几种局部置换算法的相关性：什么地方是相似的？什么地方是不同的？为什么有这种相似或不同？
8. 什么是工作集？
9. 什么是常驻集？
10. 工作集算法的思路？
11. 缺页率算法的思路？
12. 什么是虚拟内存管理的抖动现象？
13. 操作系统负载控制的最佳状态是什么状态？

===== SPOC思考题 =====

1. ==== （spoc）请证明为何LRU算法不会出现belady现象 ====


LRU算法不会出现Belady异常

虚拟页数量为M，访问页的序列为(b(t), t=1,2,3...,  b(t)表示在t时刻的访问页号，0< b(t) < M+1 )。在时刻t，物理页帧的集合为S(t)，其元素范围在[0,N]中，物理页帧的集合大小为N  (N<M). 
如果 b(t) ∈ S(t), 则表示命中(hit)，且物理页帧在t+1时刻的集合
S(t + 1) = S(t)
如果b(t) 不属于S(t)，则表示缺页（miss），这时有一个块要被换出，换出的页位v(t)。则物理页帧在t+1时刻的集合
S(t + 1) = (S(t) − {v(t)}) ∪ {b(t)}

设S(1) = (1,2....,N).  S`(1) = (1,2....,N).  即 S(1)=S`(1) 
请证明LRU算法在物理页帧集合S`的大小为N+k（0<k<M-N）时的缺失率比在物理页帧集合S大小为N的缺失率要低。

提示：
反证法
分三种情况讨论：
1  b(t) 属于S(t)，且b（t）属于S`(t) 
2  b(t) 不属于S(t)，且b（t）属于S`(t) 
3  b(t) 不属于S(t)，且b（t）不属于S`(t) 
另外：是否可能出现 b(t) 属于S(t)，且b（t）不属于S`(t) 的情况

2. ==== （spoc）根据你的学号 mod 4的结果值，确定选择四种替换算法（0：LRU置换算法，1:改进的clock 页置换算法，2：工作集页置换算法，3：缺页率置换算法）中的一种来设计一个应用程序（可基于python, ruby, C, C++，LISP等）模拟实现，并给出测试。请参考附件代码或独自实现。 ====



=== 对模拟环境的抽象 ===

虚拟页访问序列：addresses=1,2,3,4,0,5....    这里面的最大值代表最大页号
页替换算法：policy=FIFO, LRU, OPT, CLOCK
CLOCK算法用的bit位数：clockbits=1
物理页帧大小：phypageframesize
实际保持的也访问序列：addrList [1,2,3,4,0,5,...]
物理页帧内容：memory [] 初始为空
当前占用的页帧数量：count  初始位0

=== 执行过程描述 ===

{{{code: lang="python" linenumbers="true"
	for nStr in addrList:
	   # for clock need to track the ref by reference bits
 
		try:
			idx = memory.index(n)
			hits = hits + 1
			if policy == 'LRU' :
				....
		except:
			idx = -1   #missing
			miss = miss + 1	
		 
		if  idx=-1 and ...:  #missing and need replacement
		 	#if phy page frames are full
		 	     # for FIFO , LRU
			  	 # replace victim item from memory  by " victim = memory.pop(0)" 
			   
				 # for CLOCK
				 # find one page for the beginning of scan
				 # check ref[page] and update ref[page] 	 
				 # find a victim which ref[page]=0 by  memory.remove(page)
		else:
			# miss, but no replacement needed (phy page frame not full)
			# now add to memory         
			
		#update ref for clock replacement
}}}

